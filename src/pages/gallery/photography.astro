---
import Main from '../../layouts/Main.astro';
import Card from '../../components/Card.astro';

const base = import.meta.env.BASE_URL || "/";
const url = (p = "/") => `${base}${String(p).replace(/^\/+/, "")}`;

// Data — add your own
const singles = [
  { title: "Casa Lapin Coffee Bean", src: "/img/photography/casa-lapin.jpg", alt: "Casa Lapin coffee beans on tray" },
];

const collections = [
  { title: "Porsche 956", image: "/img/photography/porsche956/IMG_9504.jpg", href: "/gallery/photography/porsche956" },
];

const hero = {
  head: "Photography Gallery",
  description: "Explore my photography collection.",
};
---

<Main head={hero.head} description={hero.description}>
  <!-- Toggle -->
  <div class="container mb-4">
    <div class="view-toggle" role="tablist" aria-label="Choose view">
      <button class="toggle-btn is-active" data-target="singles" role="tab" aria-selected="true">Singles</button>
      <button class="toggle-btn" data-target="collections" role="tab" aria-selected="false">Collections</button>
    </div>
  </div>

  <!-- Singles Grid -->
  <section id="grid-singles" class="container" aria-label="Single photographs">
    <div class="row g-4">
      {singles.map((p, i) => (
        <div class="col-12 col-sm-6 col-lg-4">
          <figure class="single-tile position-relative" data-full={url(p.src)} tabindex="0" aria-label={`Open ${p.title}`}>
            <img
              src={url(p.src)}
              alt={p.alt || p.title}
              loading="lazy"
              decoding="async"
              width="960"
              height="960"
              style="display:block;width:100%;height:auto;"
            />
            <!-- ✅ pill label added -->
            <div class="label-wrap" aria-hidden="true">
              <div class="label-pill"><span class="label-text">{p.title}</span></div>
            </div>
          </figure>
        </div>
      ))}
    </div>
  </section>

  <!-- Collections Grid -->
  <section id="grid-collections" class="container is-hidden" aria-label="Photo collections">
    <div class="row g-4">
      {collections.map((c) => (
        <Card title={c.title} image={c.image} category="collection" href={url(c.href)} />
      ))}
    </div>
  </section>

  <!-- Lightweight lightbox (dialog) -->
  <dialog id="lightbox">
    <button class="close" aria-label="Close">×</button>
    <img id="lightbox-img" alt="" />
  </dialog>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const btns = document.querySelectorAll(".toggle-btn");
      const singles = document.getElementById("grid-singles");
      const collections = document.getElementById("grid-collections");

      btns.forEach((b) => {
        b.addEventListener("click", () => {
          btns.forEach(x => { x.classList.remove("is-active"); x.setAttribute("aria-selected","false"); });
          b.classList.add("is-active"); b.setAttribute("aria-selected","true");

          const t = b.getAttribute("data-target");
          const showSingles = t === "singles";
          singles.classList.toggle("is-hidden", !showSingles);
          collections.classList.toggle("is-hidden", showSingles);
        });
      });

      const dlg = document.getElementById("lightbox");
      const img = document.getElementById("lightbox-img");
      const closeBtn = dlg.querySelector(".close");

      const open = (src, alt) => {
        img.src = src;
        img.alt = alt || "";
        if (typeof dlg.showModal === "function") dlg.showModal(); else dlg.setAttribute("open", "");
      };
      const close = () => {
        img.src = "";
        if (typeof dlg.close === "function") dlg.close(); else dlg.removeAttribute("open");
      };
      closeBtn.addEventListener("click", close);
      dlg.addEventListener("click", (e) => { if (e.target === dlg) close(); });
      document.addEventListener("keydown", (e) => { if (e.key === "Escape" && dlg.open) close(); });

      document.querySelectorAll(".single-tile").forEach(tile => {
        const full = tile.getAttribute("data-full");
        tile.addEventListener("click", () => open(full, tile.querySelector("img")?.alt));
        tile.addEventListener("keydown", (e) => { if (e.key === "Enter" || e.key === " ") { e.preventDefault(); open(full, tile.querySelector("img")?.alt); } });
      });
    });
  </script>

  <style>
    /* Toggle */
    .view-toggle {
      display: inline-flex; gap: 6px; padding: 4px;
      background: #f2f4f5; border-radius: 999px; border: 1px solid rgba(0,0,0,.06);
    }
    .toggle-btn {
      appearance: none; border: 0; background: transparent; padding: .4rem .85rem;
      border-radius: 999px; cursor: pointer; color: #333; font-weight: 500;
      transition: background .18s ease, color .18s ease;
    }
    .toggle-btn.is-active { background: #fff; color: #0b6b53; box-shadow: 0 1px 2px rgba(0,0,0,.05); }

    .is-hidden { display: none !important; }

    /* Singles tiles */
    .single-tile {
      margin: 0; background: #fff; border: 1px solid rgba(0,0,0,.08);
      border-radius: 12px; overflow: hidden; cursor: zoom-in;
      transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease;
    }
    .single-tile:hover {
      transform: translateY(-2px);
      border-color: rgba(0,0,0,.12);
      box-shadow: 0 6px 16px rgba(0,0,0,.10);
    }
    .single-tile img { display:block; width:100%; height:auto; aspect-ratio: 4/3; object-fit: cover; }

    /* ✅ Pill label style */
    .label-wrap {
      position: absolute; left: 0; right: 0; bottom: 20px;
      display: grid; place-items: center; pointer-events: none;
    }
    .label-pill {
      max-width: 86%;
      background: rgba(0,0,0,.66);
      color: #f1f1f1;
      border: 1px solid rgba(255,255,255,.35);
      border-radius: 999px;
      padding: .65rem 1.1rem;
      transform: translateY(12px);
      opacity: .92;
      transition: transform .22s ease, opacity .22s ease, box-shadow .22s ease, border-color .22s ease;
      backdrop-filter: saturate(120%) blur(4px);
    }
    .single-tile:hover .label-pill {
      transform: translateY(0);
      opacity: 1;
      box-shadow: 0 6px 16px rgba(0,0,0,.22);
      border-color: rgba(255,255,255,.55);
    }
    .label-text { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }

    /* Dialog lightbox */
    dialog#lightbox {
      padding: 0; border: 0; border-radius: 12px; overflow: hidden;
      background: #111; color: #fff;
      max-width: min(92vw, 1200px);
    }
    dialog::backdrop { background: rgba(0,0,0,.6); }
    #lightbox img { display:block; width:100%; height:auto; }
    #lightbox .close {
      position: absolute; top: 8px; right: 10px;
      background: rgba(255,255,255,.1); color:#fff; border: 1px solid rgba(255,255,255,.25);
      border-radius: 10px; padding: .2rem .55rem; cursor: pointer;
    }

    /* Smooth cross-fade */
    section.container {
      opacity: 1;
      transform: translateY(0);
      transition: opacity 0.45s ease, transform 0.45s ease;
    }
    section.container.is-hidden {
      opacity: 0;
      transform: translateY(10px);
      pointer-events: none;
      position: absolute;
      width: 100%;
    }

    @media (max-width: 575.98px) {
      .single-tile img { aspect-ratio: 1 / 1; } /* square on small screens */
    }
  </style>
</Main>
